generator client {
  provider        = "prisma-client-js"
  output          = "../generated/prisma"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Asset {
  id                String             @id @default(cuid())
  type              AssetType          @default(IMAGE)
  url               String             @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  brand             Brand?
  category          Category?
  productAsset      ProductAsset[]
  desktopSliderItem SliderItemSchema[] @relation("DesktopAsset")
  mobileSliderItem  SliderItemSchema[] @relation("MobileAsset")
  variantOption     VariantOption?

  @@index([url])
}

model User {
  id                String                 @id @default(cuid())
  role              UserRole               @default(USER)
  name              String
  surname           String
  email             String?                @unique
  phone             String?                @unique
  password          String?
  imageUrl          String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  defaultAddressId  String?                @unique
  addresses         AddressSchema[]
  carts             Cart[]
  specificDiscounts DiscountCustomer[]
  discountUsages    DiscountUsage[]
  orders            Order[]
  paymentRequests   PaymentRequestSchema[]
  refreshTokens     RefreshTokens[]
  defaultAddress    AddressSchema?         @relation("UserDefaultAddress", fields: [defaultAddressId], references: [id])

  @@index([id, email, phone])
}

model RefreshTokens {
  id                 String    @id @default(cuid())
  hashedRefreshToken String    @unique
  userAgent          String?
  browser            String?
  browserVersion     String?
  os                 String?
  osVersion          String?
  deviceType         String?
  deviceName         String?
  ipAddress          String?
  userId             String
  expiresAt          DateTime
  revokedAt          DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([id, hashedRefreshToken])
}

model CategoryTranslation {
  id              String   @id @default(cuid())
  locale          Locale   @default(TR)
  name            String
  slug            String
  description     String?
  metaTitle       String?
  metaDescription String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  categoryId      String
  category        Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([locale, categoryId])
  @@unique([locale, slug])
}

model Category {
  id                      String                 @id @default(cuid())
  imageId                 String?                @unique
  parentCategoryId        String?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  categoryGridComponentId String?
  categoryGridComponent   CategoryGridComponent? @relation(fields: [categoryGridComponentId], references: [id])
  image                   Asset?                 @relation(fields: [imageId], references: [id])
  parentCategory          Category?              @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  childCategories         Category[]             @relation("CategoryHierarchy")
  translations            CategoryTranslation[]
  discountConditions      DiscountCategory[]
  footerLinks             FooterLinks[]
  products                ProductCategory[]

  @@index([parentCategoryId])
}

model TaxonomyCategory {
  id           String             @id @default(cuid())
  googleId     String             @unique
  parentId     String?
  path         String?
  pathNames    String?
  depth        Int                @default(0)
  originalName String
  isActive     Boolean            @default(true)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  products     Product[]
  parent       TaxonomyCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children     TaxonomyCategory[] @relation("CategoryHierarchy")

  @@index([googleId])
  @@index([parentId])
  @@index([path])
  @@index([depth])
  @@index([isActive])
}

model ProductCategory {
  id         String   @id @default(cuid())
  productId  String
  categoryId String
  createdAt  DateTime @default(now())
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, categoryId])
  @@index([productId])
  @@index([categoryId])
}

model BrandTranslation {
  id              String   @id @default(cuid())
  locale          Locale   @default(TR)
  name            String
  slug            String
  description     String?
  metaTitle       String?
  metaDescription String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  brandId         String
  brand           Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@unique([locale, brandId])
  @@unique([locale, slug])
}

model Brand {
  id                 String             @id @default(cuid())
  imageId            String?            @unique
  parentBrandId      String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  image              Asset?             @relation(fields: [imageId], references: [id])
  parentBrand        Brand?             @relation("BrandHierarchy", fields: [parentBrandId], references: [id])
  childBrands        Brand[]            @relation("BrandHierarchy")
  translations       BrandTranslation[]
  discountConditions DiscountBrand[]
  footerLinks        FooterLinks[]
  products           Product[]

  @@index([parentBrandId])
}

model VariantGroupTranslation {
  id             String       @id @default(cuid())
  locale         Locale       @default(TR)
  name           String
  slug           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  variantGroupId String
  VariantGroup   VariantGroup @relation(fields: [variantGroupId], references: [id], onDelete: Cascade)

  @@unique([locale, variantGroupId])
  @@unique([locale, slug])
  @@index([locale, slug])
  @@index([variantGroupId])
}

model VariantGroup {
  id                   String                    @id @default(cuid())
  type                 VariantGroupType          @default(LIST)
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  productVariantGroups ProductVariantGroup[]
  translations         VariantGroupTranslation[]
  options              VariantOption[]

  @@index([type])
}

model VariantOptionTranslation {
  id              String        @id @default(cuid())
  locale          Locale        @default(TR)
  name            String
  slug            String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  variantOptionId String
  variantOption   VariantOption @relation(fields: [variantOptionId], references: [id], onDelete: Cascade)

  @@unique([variantOptionId, locale])
  @@unique([locale, slug])
  @@index([locale, slug])
  @@index([variantOptionId])
}

model VariantOption {
  id                    String                     @id @default(cuid())
  hexValue              String?
  assetId               String?                    @unique
  variantGroupId        String
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt
  productVariantOptions ProductVariantOption[]     @relation("ProductVariantOptions")
  asset                 Asset?                     @relation(fields: [assetId], references: [id])
  variantGroup          VariantGroup               @relation(fields: [variantGroupId], references: [id], onDelete: Cascade)
  translations          VariantOptionTranslation[]

  @@index([variantGroupId])
  @@index([hexValue])
}

model ProductTranslation {
  id              String   @id @default(cuid())
  locale          Locale   @default(TR)
  name            String
  slug            String
  description     String?
  metaTitle       String?
  metaDescription String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  productId       String?
  Product         Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([locale, productId])
  @@unique([locale, slug])
  @@index([locale, slug, productId])
}

model ProductPrice {
  id              String                     @id @default(cuid())
  currency        Currency                   @default(TRY)
  price           Float
  buyedPrice      Float?
  discountedPrice Float?
  productId       String?
  combinationId   String?
  createdAt       DateTime                   @default(now())
  updatedAt       DateTime                   @updatedAt
  combination     ProductVariantCombination? @relation(fields: [combinationId], references: [id], onDelete: Cascade)
  product         Product?                   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, currency])
  @@unique([combinationId, currency])
  @@index([productId, currency])
  @@index([combinationId, currency])
}

model ProductAsset {
  id            String                     @id @default(cuid())
  order         Int
  assetId       String
  productId     String?
  combinationId String?
  createdAt     DateTime                   @default(now())
  updatedAt     DateTime                   @updatedAt
  asset         Asset                      @relation(fields: [assetId], references: [id], onDelete: Cascade)
  combination   ProductVariantCombination? @relation(fields: [combinationId], references: [id], onDelete: Cascade)
  product       Product?                   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId, order])
  @@index([combinationId, order])
}

model Product {
  id                     String                      @id @default(cuid())
  type                   ProductType                 @default(PHYSICAL)
  isVariant              Boolean                     @default(false)
  active                 Boolean                     @default(true)
  stock                  Int                         @default(0)
  sku                    String?                     @unique
  barcode                String?                     @unique
  createdAt              DateTime                    @default(now())
  updatedAt              DateTime                    @updatedAt
  brandId                String?
  taxonomyCategoryId     String?
  visibleAllCombinations Boolean                     @default(false)
  cartItems              CartItem[]
  discountConditions     DiscountProduct[]
  footerLinks            FooterLinks[]
  orderItems             OrderItem[]
  brand                  Brand?                      @relation(fields: [brandId], references: [id])
  taxonomyCategory       TaxonomyCategory?           @relation(fields: [taxonomyCategoryId], references: [id])
  assets                 ProductAsset[]
  categories             ProductCategory[]
  productListItems       ProductListCarouselItem[]
  prices                 ProductPrice[]
  translations           ProductTranslation[]
  variantCombinations    ProductVariantCombination[]
  variantGroups          ProductVariantGroup[]

  @@index([brandId])
  @@index([taxonomyCategoryId])
  @@index([active])
  @@index([sku])
  @@index([barcode])
}

model ProductVariantGroup {
  id             String                 @id @default(cuid())
  productId      String
  variantGroupId String
  order          Int
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  product        Product                @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantGroup   VariantGroup           @relation(fields: [variantGroupId], references: [id], onDelete: Cascade)
  options        ProductVariantOption[]

  @@unique([productId, variantGroupId])
  @@index([productId])
  @@index([variantGroupId])
  @@index([productId, order])
}

model ProductVariantOption {
  id                    String                            @id @default(cuid())
  productVariantGroupId String
  variantOptionId       String
  order                 Int
  createdAt             DateTime                          @default(now())
  updatedAt             DateTime                          @updatedAt
  combinations          ProductVariantCombinationOption[]
  productVariantGroup   ProductVariantGroup               @relation(fields: [productVariantGroupId], references: [id], onDelete: Cascade)
  variantOption         VariantOption                     @relation("ProductVariantOptions", fields: [variantOptionId], references: [id], onDelete: Cascade)

  @@unique([productVariantGroupId, variantOptionId])
  @@index([productVariantGroupId])
  @@index([variantOptionId])
  @@index([productVariantGroupId, order])
}

model ProductVariantCombination {
  id                 String                            @id @default(cuid())
  productId          String
  sku                String?
  barcode            String?
  stock              Int                               @default(0)
  active             Boolean                           @default(true)
  createdAt          DateTime                          @default(now())
  updatedAt          DateTime                          @updatedAt
  cartItems          CartItem[]
  discountConditions DiscountProductVariant[]
  orderItems         OrderItem[]
  assets             ProductAsset[]
  productListItems   ProductListCarouselItem[]
  prices             ProductPrice[]
  product            Product                           @relation(fields: [productId], references: [id], onDelete: Cascade)
  options            ProductVariantCombinationOption[]
  translations       ProductVariantTranslation[]

  @@unique([productId, sku])
  @@unique([productId, barcode])
  @@index([productId])
  @@index([active])
}

model ProductVariantCombinationOption {
  id                     String                    @id @default(cuid())
  combinationId          String
  productVariantOptionId String
  createdAt              DateTime                  @default(now())
  updatedAt              DateTime                  @updatedAt
  combination            ProductVariantCombination @relation(fields: [combinationId], references: [id], onDelete: Cascade)
  productVariantOption   ProductVariantOption      @relation(fields: [productVariantOptionId], references: [id], onDelete: Cascade)

  @@unique([combinationId, productVariantOptionId])
  @@index([combinationId])
  @@index([productVariantOptionId])
}

model ProductVariantTranslation {
  id              String                    @id @default(cuid())
  combinationId   String
  locale          Locale                    @default(TR)
  description     String?
  metaTitle       String?
  metaDescription String?
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  combination     ProductVariantCombination @relation(fields: [combinationId], references: [id], onDelete: Cascade)

  @@unique([combinationId, locale])
  @@index([combinationId, locale])
}

model CountryTranslation {
  id        String   @id @default(cuid())
  locale    Locale   @default(TR)
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  countryId String
  Country   Country  @relation(fields: [countryId], references: [id])

  @@unique([locale, countryId])
  @@index([countryId])
  @@index([locale])
  @@index([name])
}

model Country {
  id                 String                  @id
  name               String
  iso2               String?
  iso3               String?
  phoneCode          String?
  capital            String?
  currency           String?
  native             String?
  region             String?
  subregion          String?
  emoji              String?
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  type               CountryType             @default(STATE)
  addressSchema      AddressSchema[]
  cities             City[]
  countryCurrencyMap CountryDefaultSettings?
  translations       CountryTranslation[]
  cargoLocation      Location[]
  states             State[]

  @@index([name])
  @@index([iso2])
  @@index([iso3])
  @@index([region])
  @@index([subregion])
  @@index([currency])
}

model State {
  id            String          @id
  name          String
  stateCode     String?
  countryId     String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  addressSchema AddressSchema[]
  Country       Country         @relation(fields: [countryId], references: [id])

  @@index([countryId])
  @@index([name])
  @@index([stateCode])
  @@index([countryId, name])
}

model City {
  id            String          @id
  name          String
  latitude      String?
  longitude     String?
  countryId     String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  addressSchema AddressSchema[]
  country       Country         @relation(fields: [countryId], references: [id])
  districts     District[]

  @@index([countryId])
  @@index([name])
  @@index([latitude, longitude])
}

model District {
  id            String          @id
  name          String
  cityId        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  addressSchema AddressSchema[]
  city          City            @relation(fields: [cityId], references: [id])

  @@index([cityId])
}

model CartItem {
  id           String                     @id @default(cuid())
  quantity     Int                        @default(1)
  whereAdded   WhereAdded                 @default(PRODUCT_PAGE)
  isVisible    Boolean                    @default(true)
  visibleCause inVisibleCause?
  productId    String?
  variantId    String?
  cartId       String
  deletedAt    DateTime?
  createdAt    DateTime                   @default(now())
  updatedAt    DateTime                   @updatedAt
  cart         Cart                       @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product      Product?                   @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant      ProductVariantCombination? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId, variantId])
  @@index([cartId, productId, variantId])
}

model Cart {
  id                String                 @id @default(cuid())
  status            CartStatus             @default(ACTIVE)
  currency          Currency               @default(TRY)
  locale            Locale                 @default(TR)
  shippingAddressId String?
  billingAddressId  String?
  cargoRuleId       String?
  userId            String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  billingAddress    AddressSchema?         @relation("CartBillingAddress", fields: [billingAddressId], references: [id])
  cargoRule         CargoRule?             @relation(fields: [cargoRuleId], references: [id])
  shippingAddress   AddressSchema?         @relation("CartShippingAddress", fields: [shippingAddressId], references: [id])
  user              User?                  @relation(fields: [userId], references: [id])
  items             CartItem[]
  order             Order?
  paymentRequests   PaymentRequestSchema[]
}

model FooterLinks {
  id                String           @id @default(cuid())
  order             Int
  title             String
  options           Json?
  customLink        String?
  productId         String?
  categoryId        String?
  brandId           String?
  footerLinkGroupId String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  brand             Brand?           @relation(fields: [brandId], references: [id], onDelete: Cascade)
  category          Category?        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  footerLinkGroup   FooterLinkGroups @relation(fields: [footerLinkGroupId], references: [id], onDelete: Cascade)
  product           Product?         @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model FooterLinkGroups {
  id        String        @id @default(cuid())
  order     Int
  title     String
  options   Json?
  footerId  String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  footer    Footer        @relation(fields: [footerId], references: [id], onDelete: Cascade)
  links     FooterLinks[]
}

model Footer {
  id         String             @id @default(cuid())
  options    Json?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  linkGroups FooterLinkGroups[]
}

model SliderItemSchema {
  id               String         @id @default(cuid())
  order            Int
  isActive         Boolean        @default(true)
  mobileAssetId    String?
  desktopAssetId   String?
  customLink       String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  sliderSettingsId String
  desktopAsset     Asset?         @relation("DesktopAsset", fields: [desktopAssetId], references: [id])
  mobileAsset      Asset?         @relation("MobileAsset", fields: [mobileAssetId], references: [id])
  SliderSettings   SliderSettings @relation(fields: [sliderSettingsId], references: [id])

  @@index([isActive])
}

model SliderSettings {
  id               String             @id @default(cuid())
  isAutoPlay       Boolean            @default(false)
  autoPlayInterval Int?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  component        LayoutComponent[]
  items            SliderItemSchema[]
}

model MarqueeSchema {
  id         String            @id @default(cuid())
  options    Json?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  components LayoutComponent[]
}

model ProductListCarouselTranslation {
  id                    String              @id @default(cuid())
  locale                Locale              @default(TR)
  title                 String
  productListCarouselId String
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  productListCarousel   ProductListCarousel @relation(fields: [productListCarouselId], references: [id], onDelete: Cascade)

  @@unique([locale, productListCarouselId])
  @@index([productListCarouselId])
}

model ProductListCarousel {
  id           String                           @id @default(cuid())
  createdAt    DateTime                         @default(now())
  updatedAt    DateTime                         @updatedAt
  components   LayoutComponent[]
  items        ProductListCarouselItem[]
  translations ProductListCarouselTranslation[]
}

model ProductListCarouselItem {
  id                    String                     @id @default(cuid())
  productListCarouselId String
  productId             String
  variantId             String?
  order                 Int
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt
  product               Product                    @relation(fields: [productId], references: [id], onDelete: Cascade)
  productListCarousel   ProductListCarousel        @relation(fields: [productListCarouselId], references: [id], onDelete: Cascade)
  variant               ProductVariantCombination? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([productListCarouselId, productId, variantId])
  @@unique([productListCarouselId, order])
  @@index([productListCarouselId, order])
}

model CategoryGridComponent {
  id         String            @id @default(cuid())
  options    Json?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  categories Category[]
  components LayoutComponent[]
}

model LayoutComponent {
  id                      String                 @id @default(cuid())
  type                    LayoutComponentType
  order                   Int
  layoutId                String
  sliderId                String?
  marqueeId               String?
  productListCarouselId   String?
  categoryGridComponentId String?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  categoryGrid            CategoryGridComponent? @relation(fields: [categoryGridComponentId], references: [id], onDelete: Cascade)
  layout                  Layout                 @relation(fields: [layoutId], references: [id], onDelete: Cascade)
  marquee                 MarqueeSchema?         @relation(fields: [marqueeId], references: [id], onDelete: Cascade)
  productListCarousel     ProductListCarousel?   @relation(fields: [productListCarouselId], references: [id], onDelete: Cascade)
  slider                  SliderSettings?        @relation(fields: [sliderId], references: [id])

  @@unique([layoutId, order])
}

model Layout {
  id            String            @id @default(cuid())
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  otherSettings Json?
  components    LayoutComponent[]
}

model AddressSchema {
  id                         String      @id @default(cuid())
  email                      String?
  addressTitle               String?
  phone                      String
  tcKimlikNo                 String?
  name                       String
  surname                    String
  addressLine1               String
  addressLine2               String?
  zipCode                    String?
  countryId                  String
  stateId                    String?
  cityId                     String?
  userId                     String?
  addressLocationType        CountryType
  isBillingAddress           Boolean     @default(false)
  isCorporateInvoice         Boolean     @default(false)
  companyName                String?
  taxNumber                  String?
  companyRegistrationAddress String?
  districtId                 String?
  createdAt                  DateTime    @default(now())
  updatedAt                  DateTime    @updatedAt
  city                       City?       @relation(fields: [cityId], references: [id])
  country                    Country     @relation(fields: [countryId], references: [id])
  district                   District?   @relation(fields: [districtId], references: [id])
  state                      State?      @relation(fields: [stateId], references: [id])
  user                       User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  billingCarts               Cart[]      @relation("CartBillingAddress")
  shippingCarts              Cart[]      @relation("CartShippingAddress")
  defaultForUser             User?       @relation("UserDefaultAddress")

  @@index([userId])
  @@index([countryId])
  @@index([stateId])
  @@index([cityId])
}

model CountryDefaultSettings {
  id           String   @id @default(cuid())
  countryId    String   @unique
  currency     Currency @default(TRY)
  locale       Locale   @default(TR)
  translations Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  country      Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
}

model CargoZone {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  rules     CargoRule[]
  locations Location[]
}

model Location {
  id          String    @id @default(cuid())
  cargoZoneId String
  countryId   String
  stateIds    String[]  @default([])
  cityIds     String[]  @default([])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  cargoZone   CargoZone @relation(fields: [cargoZoneId], references: [id], onDelete: Cascade)
  country     Country   @relation(fields: [countryId], references: [id])

  @@unique([cargoZoneId, countryId])
}

model CargoRule {
  id              String                 @id @default(cuid())
  name            String
  ruleType        RuleType               @default(SalesPrice)
  minValue        Float?
  maxValue        Float?
  price           Float?
  currency        Currency               @default(TRY)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  cargoZoneId     String?
  CargoZone       CargoZone?             @relation(fields: [cargoZoneId], references: [id])
  carts           Cart[]
  paymentRequests PaymentRequestSchema[]

  @@index([ruleType])
}

model OrderItem {
  id              String                     @id @default(cuid())
  buyedPrice      Float
  originalPrice   Float?
  quantity        Int                        @default(1)
  totalPrice      Float
  buyedVariants   Json?
  productSnapshot Json?
  transactionId   String?
  productId       String
  variantId       String?
  orderId         String
  createdAt       DateTime                   @default(now())
  updatedAt       DateTime                   @updatedAt
  order           Order                      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product         Product                    @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant         ProductVariantCombination? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([orderId, productId, variantId])
  @@index([orderId])
  @@index([productId])
}

model Order {
  id              String                @id @default(cuid())
  paymentId       String                @unique
  conversationId  String?
  orderNumber     String                @unique
  orderStatus     OrderStatus           @default(PENDING)
  paymentStatus   PaymentStatus         @default(PENDING)
  paymentType     PaymentType           @default(THREE_D_SECURE)
  currency        Currency              @default(TRY)
  locale          Locale                @default(TR)
  subtotal        Float
  totalAmount     Float
  taxAmount       Float?
  shippingCost    Float?
  discountAmount  Float?
  customerNotes   String?
  adminNotes      String?
  confirmedAt     DateTime?
  shippedAt       DateTime?
  deliveredAt     DateTime?
  cancelledAt     DateTime?
  cardType        String?
  cardFamily      String?
  cardAssociation String?
  binNumber       String?
  lastFourDigits  String?
  shippingAddress Json?
  billingAddress  Json?
  userId          String?
  cartId          String?               @unique
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  discountUsage   DiscountUsage?
  cart            Cart?                 @relation(fields: [cartId], references: [id])
  user            User?                 @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]
  paymentRequests PaymentRequestSchema?

  @@index([paymentId, orderNumber, paymentStatus, orderStatus])
}

model PaymentRequestSchema {
  id              String               @id @default(cuid())
  userId          String?
  paymentProvider PaymentProvider      @default(IYZICO)
  paymentStatus   PaymentRequestStatus @default(WAITING_THREE_D_SECURE)
  cargoRuleId     String?
  billingAddress  Json?
  shippingAddress Json?
  transactionId   String?
  paymentId       String?
  conversationId  String?
  amount          Decimal              @db.Decimal(10, 2)
  currency        Currency             @default(TRY)
  subtotal        Decimal?             @db.Decimal(10, 2)
  shippingCost    Decimal?             @db.Decimal(10, 2)
  discountAmount  Decimal?             @db.Decimal(10, 2)
  taxAmount       Decimal?             @db.Decimal(10, 2)
  cardType        String?
  cardFamily      String?
  cardAssociation String?
  binNumber       String?
  lastFourDigits  String?
  installment     Int                  @default(1)
  errorCode       String?
  errorMessage    String?
  errorGroup      String?
  failureReason   String?
  isReviewed      Boolean              @default(false)
  reviewedAt      DateTime?
  reviewedBy      String?
  adminNotes      String?
  cartId          String?
  orderId         String?              @unique
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  completedAt     DateTime?
  cargoRule       CargoRule?           @relation(fields: [cargoRuleId], references: [id])
  cart            Cart?                @relation(fields: [cartId], references: [id], onDelete: Cascade)
  order           Order?               @relation(fields: [orderId], references: [id])
  user            User?                @relation(fields: [userId], references: [id])

  @@index([cartId])
  @@index([orderId])
  @@index([paymentStatus])
  @@index([userId])
  @@index([createdAt])
  @@index([paymentId])
}

model Discount {
  id                           String                    @id @default(cuid())
  title                        String
  type                         DiscountType
  isActive                     Boolean                   @default(true)
  currencies                   Currency[]
  startDate                    DateTime?
  endDate                      DateTime?
  isLimitPurchase              Boolean                   @default(false)
  minPurchaseAmount            Float?
  maxPurchaseAmount            Float?
  isLimitItemQuantity          Boolean                   @default(false)
  minItemQuantity              Int?
  maxItemQuantity              Int?
  allowDiscountedItems         Boolean                   @default(false)
  allowedDiscountedItemsBy     AllowedDiscountedItemsBy?
  mergeOtherCampaigns          Boolean                   @default(false)
  isLimitTotalUsage            Boolean                   @default(false)
  totalUsageLimit              Int?
  isLimitTotalUsagePerCustomer Boolean                   @default(false)
  totalUsageLimitPerCustomer   Int?
  discountValue                Float?
  discountAmount               Float?
  isAllCustomers               Boolean                   @default(true)
  isAllProducts                Boolean                   @default(true)
  createdAt                    DateTime                  @default(now())
  updatedAt                    DateTime                  @updatedAt
  coupons                      Coupon[]
  conditionGroups              DiscountConditionGroup[]
  customers                    DiscountCustomer[]
  tiers                        DiscountTier[]
  usages                       DiscountUsage[]

  @@index([isActive, startDate, endDate])
}

model Coupon {
  id         String          @id @default(cuid())
  code       String          @unique
  discountId String
  usageCount Int             @default(0)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  discount   Discount        @relation(fields: [discountId], references: [id], onDelete: Cascade)
  usages     DiscountUsage[]

  @@index([code])
  @@index([discountId])
}

model DiscountTier {
  id                 String   @id @default(cuid())
  discountId         String
  minQuantity        Int?
  maxQuantity        Int?
  minAmount          Float?
  maxAmount          Float?
  discountPercentage Float?
  discountAmount     Float?
  discount           Discount @relation(fields: [discountId], references: [id], onDelete: Cascade)

  @@index([discountId])
}

model DiscountCustomer {
  discountId String
  userId     String
  discount   Discount @relation(fields: [discountId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([discountId, userId])
}

model DiscountConditionGroup {
  id         String                   @id @default(cuid())
  discountId String
  operator   FilterOperator
  type       DiscountConditionType    @default(PRODUCT)
  brands     DiscountBrand[]
  categories DiscountCategory[]
  discount   Discount                 @relation(fields: [discountId], references: [id], onDelete: Cascade)
  products   DiscountProduct[]
  variants   DiscountProductVariant[]

  @@index([discountId])
}

model DiscountProduct {
  groupId   String
  productId String
  group     DiscountConditionGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  product   Product                @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([groupId, productId])
}

model DiscountCategory {
  groupId    String
  categoryId String
  category   Category               @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  group      DiscountConditionGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([groupId, categoryId])
}

model DiscountBrand {
  groupId String
  brandId String
  brand   Brand                  @relation(fields: [brandId], references: [id], onDelete: Cascade)
  group   DiscountConditionGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([groupId, brandId])
}

model DiscountProductVariant {
  groupId   String
  variantId String
  group     DiscountConditionGroup    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  variant   ProductVariantCombination @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@id([groupId, variantId])
}

model DiscountUsage {
  id         String   @id @default(cuid())
  discountId String
  couponId   String
  userId     String
  orderId    String   @unique
  amount     Float
  usedAt     DateTime @default(now())
  coupon     Coupon   @relation(fields: [couponId], references: [id])
  discount   Discount @relation(fields: [discountId], references: [id])
  order      Order    @relation(fields: [orderId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([discountId])
  @@index([couponId])
  @@index([userId])
}

view ProductUnifiedView {
  id                     String?
  productId              String?
  combinationId          String?
  entryType              String?
  sku                    String?
  barcode                String?
  type                   ProductType?
  stock                  Int?
  active                 Boolean?
  isProductActive        Boolean?
  visibleAllCombinations Boolean?
  brandId                String?
  taxonomyCategoryId     String?
  createdAt              DateTime?
  updatedAt              DateTime?
  prices                 Json?
  productTranslations    Json?
  productAssets          Json?
  categories             Json?
  variantTranslation     Json?
  variantAssets          Json?
  variantOptions         Json?
}

enum CartStatus {
  ACTIVE
  ABANDONED
  CONVERTED
  MERGED
}

enum LayoutComponentType {
  MARQUEE
  SLIDER
  PRODUCT_LIST
  CATEGORY_GRID
}

enum UserRole {
  OWNER
  ADMIN
  USER
}

enum Locale {
  TR
  EN
  DE
}

enum Currency {
  TRY
  USD
  EUR
  GBP
}

enum VariantGroupType {
  LIST
  COLOR
}

enum AssetType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum ProductType {
  DIGITAL
  PHYSICAL
}

enum CountryType {
  NONE
  STATE
  CITY
}

enum WhereAdded {
  PRODUCT_PAGE
  CATEGORY_PAGE
  BRAND_PAGE
  CART_PAGE
}

enum inVisibleCause {
  DELETED
  DELETED_BY_USER
  DELETED_BY_ADMIN
  OUT_OF_STOCK
  CURRENCY_MISMATCH
  LOCALE_MISMATCH
}

enum RuleType {
  SalesPrice
  ProductWeight
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIAL_REFUND
}

enum PaymentType {
  THREE_D_SECURE
  NON_THREE_D_SECURE
  BANK_TRANSFER
}

enum PaymentProvider {
  IYZICO
  PAYTR
  STRIPE
  PAYPAL
}

enum PaymentRequestStatus {
  PENDING
  WAITING_THREE_D_SECURE
  THREE_D_SECURE_FAILED
  THREE_D_SECURE_SUCCESS
  PROCESSING
  SUCCESS
  FAILED
  CANCELLED
  REFUNDED
  TIMEOUT
}

enum DiscountType {
  PERCENTAGE
  PERCENTAGE_GROW_QUANTITY
  PERCENTAGE_GROW_PRICE
  FIXED_AMOUNT
  FIXED_AMOUNT_GROW_QUANTITY
  FIXED_AMOUNT_GROW_PRICE
  FREE_SHIPPING
}

enum AllowedDiscountedItemsBy {
  price
  discounted_price
}

enum FilterOperator {
  AND
  OR
}

enum DiscountConditionType {
  PRODUCT
  CATEGORY
  BRAND
  VARIANT
}

enum DiscountEffectType {
  AUTOMATIC
  COUPON
}

enum DiscountWhereVisible {
  PRODUCT_PAGE
  CHECKOUT_PAGE
  ALL
}
