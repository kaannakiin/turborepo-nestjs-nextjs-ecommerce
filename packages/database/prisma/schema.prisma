generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CartStatus {
  ACTIVE // Aktif sepet
  ABANDONED // Terk edilmiş
  CONVERTED // Siparişe dönüştürülmüş
  MERGED // Başka sepete birleştirilmiş
}

enum LayoutComponentType {
  MARQUEE
  SLIDER
  PRODUCT_LIST
  CATEGORY_GRID
}

enum UserRole {
  OWNER
  ADMIN
  USER
}

enum Locale {
  TR
  EN
  DE
}

enum Currency {
  TRY
  USD
  EUR
  GBP
}

enum VariantGroupType {
  LIST
  COLOR
}

enum AssetType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum ProductType {
  DIGITAL
  PHYSICAL
}

// İndirim sistemi için enum - BUY_X_GET_Y eklendi
enum DiscountType {
  PERCENTAGE
  FIXED
  FREE_SHIPPING
  BUY_X_GET_Y
}

// Kupon oluşturma türü enum'ı
enum CouponGenerationType {
  MANUAL
  AUTOMATIC
}

model Asset {
  id   String    @id @default(cuid())
  type AssetType @default(IMAGE)
  url  String    @unique

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  variantOption     VariantOption?
  productAsset      ProductAsset[]
  brand             Brand?
  category          Category?
  mobileSliderItem  SliderItemSchema[] @relation("MobileAsset")
  desktopSliderItem SliderItemSchema[] @relation("DesktopAsset")

  @@index([url])
}

model User {
  id       String   @id @default(cuid())
  role     UserRole @default(USER)
  name     String
  surname  String
  email    String?  @unique
  phone    String?  @unique
  password String?
  imageUrl String?

  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  discountIncluded DiscountIncludedUser[]
  discountUsage    CouponUsage[]
  carts            Cart[]
  addresses        AddressSchema[] // addressSchema yerine addresses daha açıklayıcı
  orders           Order[]
  defaultAddressId String?                @unique
  defaultAddress   AddressSchema?         @relation("UserDefaultAddress", fields: [defaultAddressId], references: [id], onDelete: SetNull)
  refreshTokens    RefreshTokens[]

  @@index([id, email, phone])
}

model RefreshTokens {
  id                 String  @id @default(cuid())
  hashedRefreshToken String  @unique
  userAgent          String?
  browser            String?
  browserVersion     String?
  os                 String?
  osVersion          String?
  deviceType         String? // mobile, tablet, desktop
  deviceName         String?

  ipAddress String?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([id, hashedRefreshToken])
}

model CategoryTranslation {
  id              String  @id @default(cuid())
  locale          Locale  @default(TR)
  name            String
  slug            String
  description     String? @db.Text
  metaTitle       String?
  metaDescription String?

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  @@unique([locale, categoryId])
  @@unique([locale, slug])
}

model Category {
  id               String                @id @default(cuid())
  image            Asset?                @relation(fields: [imageId], references: [id], onDelete: SetNull)
  imageId          String?               @unique
  parentCategory   Category?             @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id], onDelete: SetNull)
  parentCategoryId String?
  childCategories  Category[]            @relation("CategoryHierarchy")
  products         ProductCategory[]
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  translations     CategoryTranslation[]

  // İndirim sistemi ilişkisi
  discountIncluded        DiscountIncludedCategory[]
  categoryGridComponent   CategoryGridComponent?     @relation(fields: [categoryGridComponentId], references: [id])
  categoryGridComponentId String?
  footerLinks             FooterLinks[]

  @@index([parentCategoryId])
}

model TaxonomyCategory {
  id       String @id @default(cuid())
  googleId String @unique

  parentId String?
  parent   TaxonomyCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children TaxonomyCategory[] @relation("CategoryHierarchy")

  path      String?
  pathNames String?
  depth     Int     @default(0)

  originalName String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  products Product[]

  @@index([googleId])
  @@index([parentId])
  @@index([path])
  @@index([depth])
  @@index([isActive])
}

model ProductCategory {
  id         String @id @default(cuid())
  productId  String
  categoryId String

  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([productId, categoryId])
  @@index([productId])
  @@index([categoryId])
}

model BrandTranslation {
  id              String  @id @default(cuid())
  locale          Locale  @default(TR)
  name            String
  slug            String
  description     String? @db.Text
  metaTitle       String?
  metaDescription String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  brandId   String
  brand     Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@unique([locale, brandId])
  @@unique([locale, slug])
}

model Brand {
  id      String  @id @default(cuid())
  image   Asset?  @relation(fields: [imageId], references: [id], onDelete: SetNull)
  imageId String? @unique

  parentBrandId String?
  parentBrand   Brand?             @relation("BrandHierarchy", fields: [parentBrandId], references: [id], onDelete: SetNull)
  childBrands   Brand[]            @relation("BrandHierarchy")
  products      Product[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  translations  BrandTranslation[]

  // İndirim sistemi ilişkisi
  discountIncluded DiscountIncludedBrand[]
  footerLinks      FooterLinks[]

  @@index([parentBrandId])
}

model VariantGroupTranslation {
  id     String @id @default(cuid())
  locale Locale @default(TR)
  name   String
  slug   String

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  VariantGroup   VariantGroup @relation(fields: [variantGroupId], references: [id], onDelete: Cascade)
  variantGroupId String

  @@unique([locale, variantGroupId])
  @@unique([locale, slug])
  @@index([locale, slug])
  @@index([variantGroupId])
}

model VariantGroup {
  id                   String                    @id @default(cuid())
  type                 VariantGroupType          @default(LIST)
  translations         VariantGroupTranslation[]
  options              VariantOption[]
  productVariantGroups ProductVariantGroup[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type])
}

model VariantOptionTranslation {
  id     String @id @default(cuid())
  locale Locale @default(TR)
  name   String
  slug   String

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  variantOption   VariantOption @relation(fields: [variantOptionId], references: [id], onDelete: Cascade)
  variantOptionId String

  @@unique([variantOptionId, locale])
  @@unique([locale, slug])
  @@index([locale, slug])
  @@index([variantOptionId])
}

model VariantOption {
  id                    String                     @id @default(cuid())
  hexValue              String?
  asset                 Asset?                     @relation(fields: [assetId], references: [id], onDelete: SetNull)
  assetId               String?                    @unique
  variantGroup          VariantGroup               @relation(fields: [variantGroupId], references: [id], onDelete: Cascade)
  variantGroupId        String
  translations          VariantOptionTranslation[]
  productVariantOptions ProductVariantOption[]     @relation("ProductVariantOptions")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([variantGroupId])
  @@index([hexValue])
}

model ProductTranslation {
  id              String  @id @default(cuid())
  locale          Locale  @default(TR)
  name            String
  slug            String
  description     String? @db.Text
  metaTitle       String?
  metaDescription String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?

  @@unique([locale, productId])
  @@unique([locale, slug])
  @@index([locale, slug, productId])
}

model ProductPrice {
  id              String   @id @default(cuid())
  currency        Currency @default(TRY)
  price           Float
  buyedPrice      Float?
  discountedPrice Float?

  // Normal product için
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?

  // Variant combination için
  combination   ProductVariantCombination? @relation(fields: [combinationId], references: [id], onDelete: Cascade)
  combinationId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, currency])
  @@unique([combinationId, currency])
  @@index([productId, currency])
  @@index([combinationId, currency])
}

model ProductAsset {
  id      String @id @default(cuid())
  order   Int
  asset   Asset  @relation(fields: [assetId], references: [id], onDelete: Cascade)
  assetId String

  // Normal product için
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?

  // Variant combination için
  combination   ProductVariantCombination? @relation(fields: [combinationId], references: [id], onDelete: Cascade)
  combinationId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, order])
  @@unique([combinationId, order])
  @@index([productId, order])
  @@index([combinationId, order])
}

model Product {
  id        String      @id @default(cuid())
  type      ProductType @default(PHYSICAL)
  isVariant Boolean     @default(false)
  active    Boolean     @default(true)
  stock     Int         @default(0)
  sku       String?     @unique
  barcode   String?     @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // İndirim sistemi ilişkisi
  discountIncluded    DiscountIncludedProduct[]
  cartItems           CartItem[]
  productListItems    ProductListCarouselItem[]
  categories          ProductCategory[]
  prices              ProductPrice[]
  translations        ProductTranslation[]
  assets              ProductAsset[]
  variantGroups       ProductVariantGroup[]
  variantCombinations ProductVariantCombination[]
  brand               Brand?                      @relation(fields: [brandId], references: [id], onDelete: SetNull)
  brandId             String?
  taxonomyCategory    TaxonomyCategory?           @relation(fields: [taxonomyCategoryId], references: [id])
  taxonomyCategoryId  String?
  footerLinks         FooterLinks[]
  orderItems          OrderItem[]

  @@index([brandId])
  @@index([taxonomyCategoryId])
  @@index([active])
  @@index([sku])
  @@index([barcode])
}

model ProductVariantGroup {
  id             String @id @default(cuid())
  productId      String
  variantGroupId String
  order          Int

  product      Product                @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantGroup VariantGroup           @relation(fields: [variantGroupId], references: [id], onDelete: Cascade)
  options      ProductVariantOption[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, variantGroupId])
  @@index([productId])
  @@index([variantGroupId])
  @@index([productId, order])
}

model ProductVariantOption {
  id                    String @id @default(cuid())
  productVariantGroupId String
  variantOptionId       String
  order                 Int

  productVariantGroup ProductVariantGroup               @relation(fields: [productVariantGroupId], references: [id], onDelete: Cascade)
  variantOption       VariantOption                     @relation("ProductVariantOptions", fields: [variantOptionId], references: [id], onDelete: Cascade)
  combinations        ProductVariantCombinationOption[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productVariantGroupId, variantOptionId])
  @@index([productVariantGroupId])
  @@index([variantOptionId])
  @@index([productVariantGroupId, order])
}

model ProductVariantCombination {
  id        String  @id @default(cuid())
  productId String
  sku       String?
  barcode   String?
  stock     Int     @default(0)
  active    Boolean @default(true)

  product          Product                           @relation(fields: [productId], references: [id], onDelete: Cascade)
  options          ProductVariantCombinationOption[]
  prices           ProductPrice[]
  assets           ProductAsset[]
  translations     ProductVariantTranslation[]
  discountIncluded DiscountIncludedVariant[]
  productListItems ProductListCarouselItem[]
  createdAt        DateTime                          @default(now())
  updatedAt        DateTime                          @updatedAt
  cartItems        CartItem[]
  orderItems       OrderItem[]

  @@unique([productId, sku])
  @@unique([productId, barcode])
  @@index([productId])
  @@index([active])
}

model ProductVariantCombinationOption {
  id                     String @id @default(cuid())
  combinationId          String
  productVariantOptionId String

  combination          ProductVariantCombination @relation(fields: [combinationId], references: [id], onDelete: Cascade)
  productVariantOption ProductVariantOption      @relation(fields: [productVariantOptionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([combinationId, productVariantOptionId])
  @@index([combinationId])
  @@index([productVariantOptionId])
}

model ProductVariantTranslation {
  id              String  @id @default(cuid())
  combinationId   String
  locale          Locale  @default(TR)
  description     String? @db.Text
  metaTitle       String?
  metaDescription String?

  combination ProductVariantCombination @relation(fields: [combinationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([combinationId, locale])
  @@index([combinationId, locale])
}

enum CountryType {
  NONE
  STATE
  CITY
}

model CountryTranslation {
  id        String   @id @default(cuid())
  locale    Locale   @default(TR)
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Country   Country  @relation(fields: [countryId], references: [id])
  countryId String

  @@unique([locale, countryId])
  @@index([countryId])
  @@index([locale])
  @@index([name])
}

model Country {
  id                 String                  @id
  name               String
  iso2               String?
  iso3               String?
  phoneCode          String?
  capital            String?
  currency           String?
  native             String?
  region             String?
  subregion          String?
  emoji              String?
  translations       CountryTranslation[]
  states             State[]
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  type               CountryType             @default(STATE)
  addressSchema      AddressSchema[]
  cities             City[]
  countryCurrencyMap CountryDefaultSettings?
  cargoLocation      Location[]

  @@index([name])
  @@index([iso2])
  @@index([iso3])
  @@index([region])
  @@index([subregion])
  @@index([currency])
}

model State {
  id            String          @id
  name          String
  stateCode     String?
  countryId     String
  Country       Country         @relation(fields: [countryId], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  addressSchema AddressSchema[]

  @@index([countryId])
  @@index([name])
  @@index([stateCode])
  @@index([countryId, name])
}

model City {
  id            String          @id
  name          String
  latitude      String?
  longitude     String?
  countryId     String
  country       Country         @relation(fields: [countryId], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  addressSchema AddressSchema[]

  @@index([countryId])
  @@index([name])
  @@index([latitude, longitude])
}

enum WhereAdded {
  PRODUCT_PAGE
  CATEGORY_PAGE
  BRAND_PAGE
  CART_PAGE
}

enum inVisibleCause {
  DELETED
  OUT_OF_STOCK
  CURRENCY_MISMATCH
  LOCALE_MISMATCH
}

model CartItem {
  id           String                     @id @default(cuid())
  quantity     Int                        @default(1)
  whereAdded   WhereAdded                 @default(PRODUCT_PAGE)
  isVisible    Boolean                    @default(true)
  visibleCause inVisibleCause?
  product      Product?                   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    String?
  variantId    String?
  variant      ProductVariantCombination? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  cartId       String
  cart         Cart                       @relation(fields: [cartId], references: [id], onDelete: Cascade)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([cartId, productId, variantId])
  @@index([cartId, productId, variantId])
}

model Cart {
  id       String     @id @default(cuid())
  status   CartStatus @default(ACTIVE)
  currency Currency   @default(TRY)
  locale   Locale     @default(TR)

  shippingAddress   AddressSchema? @relation("CartShippingAddress", fields: [shippingAddressId], references: [id], onDelete: SetNull)
  shippingAddressId String?

  billingAddress   AddressSchema? @relation("CartBillingAddress", fields: [billingAddressId], references: [id], onDelete: SetNull)
  billingAddressId String?

  cargoRule   CargoRule? @relation(fields: [cargoRuleId], references: [id], onDelete: SetNull)
  cargoRuleId String?

  user      User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]

  order Order?
}

// İNDİRİM SİSTEMİ MODELLERİ

model Discount {
  id               String               @id @default(cuid())
  type             DiscountType
  isActive         Boolean              @default(true)
  isDeleted        Boolean              @default(false)
  // Kupon oluşturma türü
  couponGeneration CouponGenerationType @default(MANUAL)

  // Normal indirim detayları (tip bazında)
  discountPercentage Decimal? // PERCENTAGE tipi için
  discountAmount     Decimal? // FIXED tipi için
  allowedCurrencies  Currency[]

  // Buy X Get Y için basitleştirilmiş alanlar
  buyQuantity  Int? // X - Alınması gereken adet
  buyProductId String? // X için ürün ID
  buyVariantId String? // X için varyant ID (combinationId)

  getQuantity                Int? // Y - Kazanılacak adet
  getProductId               String? // Y için ürün ID
  getVariantId               String? // Y için varyant ID (combinationId)
  buyXGetYDiscountPercentage Decimal? // Y ürünlerinde indirim yüzdesi

  // İlişkiler
  translations DiscountTranslation[]
  coupons      DiscountCoupon[]
  conditions   DiscountCondition?
  usage        CouponUsage[]
  // Audit alanları
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  createdBy    String? // User ID

  @@index([type])
  @@index([isActive])
  @@index([couponGeneration])
  @@index([buyProductId])
  @@index([buyVariantId])
  @@index([getProductId])
  @@index([getVariantId])
  @@index([createdAt])
}

// Çoklu Dil Desteği
model DiscountTranslation {
  id            String  @id @default(cuid())
  locale        Locale
  discountTitle String  @db.VarChar(255)
  description   String? @db.Text

  // İlişkiler
  discount   Discount @relation(fields: [discountId], references: [id], onDelete: Cascade)
  discountId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([locale, discountId])
  @@index([discountId])
  @@index([locale])
}

// Kupon Modeli
model DiscountCoupon {
  id           String @id @default(cuid())
  code         String @db.VarChar(128)
  limit        Int? // Toplam kullanım limiti
  perUserLimit Int? // Kullanıcı başı limit
  usedCount    Int    @default(0) // Kaç kez kullanıldı

  // İlişkiler
  discount   Discount @relation(fields: [discountId], references: [id], onDelete: Cascade)
  discountId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([code])
  @@index([discountId])
  @@index([code])
}

// Kupon Kullanım Geçmişi
model CouponUsage {
  id      String   @id @default(cuid())
  orderId String? // Sipariş ID
  usedAt  DateTime @default(now())

  // İlişkiler

  userId     String? // Kullanıcı ID (anonim kullanıcılar için null)
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  discount   Discount @relation(fields: [discountId], references: [id])
  discountId String

  @@index([userId])
  @@index([orderId])
  @@index([usedAt])
}

model DiscountCondition {
  id String @id @default(cuid())

  // Ürün koşulları
  allProducts Boolean @default(false)

  // Kullanıcı koşulları
  allUser             Boolean @default(false)
  onlyRegisteredUsers Boolean @default(false)

  // Sepet tutarı koşulları
  hasAmountCondition Boolean  @default(false)
  minimumAmount      Decimal?
  maximumAmount      Decimal?

  // Ürün adedi koşulları
  hasQuantityCondition Boolean @default(false)
  minimumQuantity      Int?
  maximumQuantity      Int?

  // Tarih koşulları
  addStartDate Boolean   @default(false)
  startDate    DateTime?
  addEndDate   Boolean   @default(false)
  endDate      DateTime?

  // İlişkiler
  discount           Discount                   @relation(fields: [discountId], references: [id], onDelete: Cascade)
  discountId         String                     @unique
  includedProducts   DiscountIncludedProduct[]
  includedCategories DiscountIncludedCategory[]
  includedBrands     DiscountIncludedBrand[]
  includedUsers      DiscountIncludedUser[]
  includedVariants   DiscountIncludedVariant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([discountId])
}

model DiscountIncludedVariant {
  id            String @id @default(cuid())
  combinationId String // ProductVariantCombination ID

  condition   DiscountCondition         @relation(fields: [conditionId], references: [id], onDelete: Cascade)
  conditionId String
  combination ProductVariantCombination @relation(fields: [combinationId], references: [id], onDelete: Cascade)

  @@unique([combinationId, conditionId])
  @@index([conditionId])
  @@index([combinationId])
}

// Dahil Edilen Ürünler
model DiscountIncludedProduct {
  id        String @id @default(cuid())
  productId String

  condition   DiscountCondition @relation(fields: [conditionId], references: [id], onDelete: Cascade)
  conditionId String
  product     Product           @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, conditionId])
  @@index([conditionId])
  @@index([productId])
}

// Dahil Edilen Kategoriler
model DiscountIncludedCategory {
  id         String @id @default(cuid())
  categoryId String

  condition   DiscountCondition @relation(fields: [conditionId], references: [id], onDelete: Cascade)
  conditionId String
  category    Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, conditionId])
  @@index([conditionId])
  @@index([categoryId])
}

// Dahil Edilen Markalar
model DiscountIncludedBrand {
  id      String @id @default(cuid())
  brandId String

  condition   DiscountCondition @relation(fields: [conditionId], references: [id], onDelete: Cascade)
  conditionId String
  brand       Brand             @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@unique([brandId, conditionId])
  @@index([conditionId])
  @@index([brandId])
}

// Dahil Edilen Kullanıcılar
model DiscountIncludedUser {
  id     String @id @default(cuid())
  userId String

  condition   DiscountCondition @relation(fields: [conditionId], references: [id], onDelete: Cascade)
  conditionId String
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, conditionId])
  @@index([conditionId])
  @@index([userId])
}

model FooterLinks {
  id      String @id @default(cuid())
  order   Int
  title   String
  options Json?

  customLink        String?
  product           Product?         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId         String?
  category          Category?        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId        String?
  brand             Brand?           @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId           String?
  footerLinkGroup   FooterLinkGroups @relation(fields: [footerLinkGroupId], references: [id], onDelete: Cascade)
  footerLinkGroupId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FooterLinkGroups {
  id      String @id @default(cuid())
  order   Int
  title   String
  options Json?

  footer   Footer        @relation(fields: [footerId], references: [id], onDelete: Cascade)
  footerId String
  links    FooterLinks[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Footer {
  id         String             @id @default(cuid())
  options    Json?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  linkGroups FooterLinkGroups[]
}

model SliderItemSchema {
  id       String  @id @default(cuid())
  order    Int
  isActive Boolean @default(true)

  // Asset ilişkileri
  mobileAsset    Asset?  @relation("MobileAsset", fields: [mobileAssetId], references: [id], onDelete: SetNull)
  mobileAssetId  String?
  desktopAsset   Asset?  @relation("DesktopAsset", fields: [desktopAssetId], references: [id], onDelete: SetNull)
  desktopAssetId String?

  // Link alanları - sadece bir tanesi dolu olabilir
  customLink String? // URL string

  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  SliderSettings   SliderSettings @relation(fields: [sliderSettingsId], references: [id])
  sliderSettingsId String

  @@index([isActive])
}

model SliderSettings {
  id               String  @id @default(cuid())
  isAutoPlay       Boolean @default(false)
  autoPlayInterval Int? // Otomatik oynatma aralığı (saniye cinsinden)

  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  items     SliderItemSchema[]
  component LayoutComponent[]
}

model MarqueeSchema {
  id         String            @id @default(cuid())
  options    Json?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  components LayoutComponent[]
}

model ProductListCarouselTranslation {
  id                    String              @id @default(cuid())
  locale                Locale              @default(TR)
  title                 String
  productListCarousel   ProductListCarousel @relation(fields: [productListCarouselId], references: [id], onDelete: Cascade)
  productListCarouselId String
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  @@unique([locale, productListCarouselId])
  @@index([productListCarouselId])
}

model ProductListCarousel {
  id           String                           @id @default(cuid())
  items        ProductListCarouselItem[]
  translations ProductListCarouselTranslation[]

  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  components LayoutComponent[]
}

model ProductListCarouselItem {
  id                    String  @id @default(cuid())
  productListCarouselId String
  productId             String
  variantId             String? // null ise main product, dolu ise variant
  order                 Int

  productListCarousel ProductListCarousel        @relation(fields: [productListCarouselId], references: [id], onDelete: Cascade)
  product             Product                    @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant             ProductVariantCombination? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productListCarouselId, productId, variantId])
  @@unique([productListCarouselId, order])
  @@index([productListCarouselId, order])
}

model CategoryGridComponent {
  id         String     @id @default(cuid())
  options    Json?
  categories Category[]

  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  components LayoutComponent[]
}

model LayoutComponent {
  id    String              @id @default(cuid())
  type  LayoutComponentType
  order Int

  layout                  Layout                 @relation(fields: [layoutId], references: [id], onDelete: Cascade)
  layoutId                String
  slider                  SliderSettings?        @relation(fields: [sliderId], references: [id], onDelete: SetNull)
  sliderId                String?
  marquee                 MarqueeSchema?         @relation(fields: [marqueeId], references: [id], onDelete: Cascade)
  marqueeId               String?
  productListCarousel     ProductListCarousel?   @relation(fields: [productListCarouselId], references: [id], onDelete: Cascade)
  productListCarouselId   String?
  categoryGrid            CategoryGridComponent? @relation(fields: [categoryGridComponentId], references: [id], onDelete: Cascade)
  categoryGridComponentId String?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt

  @@unique([layoutId, order])
}

model Layout {
  id            String            @id @default(cuid())
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  otherSettings Json?
  components    LayoutComponent[]
}

model AddressSchema {
  id                         String      @id @default(cuid())
  email                      String?
  addressTitle               String?
  phone                      String
  name                       String
  surname                    String
  addressLine1               String
  addressLine2               String?
  zipCode                    String?
  country                    Country     @relation(fields: [countryId], references: [id])
  countryId                  String
  state                      State?      @relation(fields: [stateId], references: [id])
  stateId                    String?
  city                       City?       @relation(fields: [cityId], references: [id])
  cityId                     String?
  user                       User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                     String?
  addressLocationType        CountryType
  isBillingAddress           Boolean     @default(false)
  isCorporateInvoice         Boolean     @default(false)
  companyName                String?
  taxNumber                  String?
  companyRegistrationAddress String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  shippingCarts  Cart[] @relation("CartShippingAddress")
  billingCarts   Cart[] @relation("CartBillingAddress")
  defaultForUser User?  @relation("UserDefaultAddress") // Bu satırı ekleyin

  @@index([userId])
  @@index([countryId])
  @@index([stateId])
  @@index([cityId])
}

enum RuleType {
  SalesPrice
  ProductWeight
}

model CountryDefaultSettings {
  id           String   @id @default(cuid())
  country      Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
  countryId    String   @unique
  currency     Currency @default(TRY)
  locale       Locale   @default(TR)
  translations Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model CargoZone {
  id String @id @default(cuid())

  locations Location[]
  rules     CargoRule[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Location {
  id          String    @id @default(cuid())
  cargoZone   CargoZone @relation(fields: [cargoZoneId], references: [id], onDelete: Cascade)
  cargoZoneId String

  // Lokasyon Detayları
  countryId String
  country   Country  @relation(fields: [countryId], references: [id])
  stateIds  String[] @default([]) // Boş array = tüm ülke
  cityIds   String[] @default([]) // Boş array = tüm ülke/state

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Aynı ülke için aynı tip location tekrar etmemeli
  @@unique([cargoZoneId, countryId])
}

model CargoRule {
  id   String @id @default(cuid())
  name String

  ruleType    RuleType   @default(SalesPrice)
  minValue    Float?
  maxValue    Float?
  price       Float?
  currency    Currency   @default(TRY)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  CargoZone   CargoZone? @relation(fields: [cargoZoneId], references: [id])
  cargoZoneId String?
  carts       Cart[]

  @@index([ruleType])
}

enum OrderStatus {
  PENDING // Beklemede
  CONFIRMED // Onaylandı
  PROCESSING // Hazırlanıyor 
  SHIPPED // Kargoya verildi
  DELIVERED // Teslim edildi
  CANCELLED // İptal edildi
  REFUNDED // İade edildi
}

enum PaymentStatus {
  PENDING // Ödeme bekliyor
  PAID // Ödendi
  FAILED // Ödeme başarısız
  REFUNDED // İade edildi
  PARTIAL_REFUND // Kısmi iade
}

model OrderItem {
  id String @id @default(cuid()) // Benzersiz sipariş kalemi ID'si

  // Fiyat Bilgileri
  buyedPrice    Float // Müşterinin ödediği birim fiyat (indirimli)
  originalPrice Float? // İndirim öncesi orijinal birim fiyat
  quantity      Int    @default(1) // Sipariş edilen adet
  totalPrice    Float // quantity * buyedPrice (kalem toplam tutarı)

  // Ürün Bilgileri (Sipariş anındaki snapshot)
  buyedVariants Json? // Satın alınan varyant bilgileri (renk, beden vs.)

  // Ödeme Takibi
  transactionId String? // Ödeme sağlayıcısından gelen işlem ID'si

  // İlişkiler
  product   Product                    @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String // Ana ürün referansı
  variant   ProductVariantCombination? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId String? // Varyant referansı (null ise ana ürün)
  order     Order                      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String // Hangi siparişe ait olduğu

  // Audit Alanları
  createdAt DateTime @default(now()) // Kayıt oluşturma tarihi
  updatedAt DateTime @updatedAt // Son güncelleme tarihi

  @@index([orderId]) // Sipariş ID'sine göre hızlı arama
  @@index([productId]) // Ürün ID'sine göre hızlı arama
}

model Order {
  id String @id @default(cuid()) // Benzersiz sipariş ID'si

  // Ödeme Bilgileri
  paymentId      String  @unique // İyzico'dan gelen ödeme ID'si
  conversationId String? // İyzico conversation ID (signature doğrulama için)
  orderNumber    String  @unique // Müşteriye gösterilen sipariş numarası

  // Durum Bilgileri
  orderStatus   OrderStatus   @default(PENDING) // Sipariş durumu
  paymentStatus PaymentStatus @default(PENDING) // Ödeme durumu

  // Bölgesel Ayarlar
  currency Currency @default(TRY) // Para birimi
  locale   Locale   @default(TR) // Dil/bölge

  // Fiyat Bilgileri
  subtotal       Float // Ürünlerin toplam tutarı
  totalAmount    Float // Müşterinin ödediği genel toplam
  taxAmount      Float? // KDV tutarı (varsa)
  shippingCost   Float? // Kargo ücreti
  discountAmount Float? // İndirim tutarı

  // Notlar
  customerNotes String? @db.Text // Müşteri notu
  adminNotes    String? @db.Text // Admin/operasyon notu

  // Tarih Takibi
  confirmedAt DateTime? // Sipariş onaylanma tarihi
  shippedAt   DateTime? // Kargoya verilme tarihi
  deliveredAt DateTime? // Teslim tarihi
  cancelledAt DateTime? // İptal tarihi

  // İlişkiler
  orderItems OrderItem[] // Sipariş kalemleri

  //Cart Info
  cardType        String? // Kart tipi (Visa, MasterCard vs.)
  cardFamily      String?
  cardAssociation String?
  binNumber       String?
  lastFourDigits  String? // Kartın son 4 hanesi

  // Adres Bilgileri (JSON olarak saklanıyor - sipariş anındaki snapshot)
  shippingAddress Json? // Teslimat adresi
  billingAddress  Json? // Fatura adresi

  // Kullanıcı İlişkisi
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String? // Kullanıcı ID'si (misafir siparişlerde null)

  // Sepet İlişkisi (Hangi sepetten oluşturuldu)
  cartId String? @unique // Kaynak sepet ID'si
  cart   Cart?   @relation(fields: [cartId], references: [id], onDelete: SetNull)

  // Hızlı arama için indeksler
  @@index([paymentId, orderNumber, paymentStatus, orderStatus])
}
